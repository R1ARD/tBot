import logging
from telegram import Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from collections import deque

import random

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


from collections import deque

# –û—á–µ—Ä–µ–¥—å –∫–ª–∏–µ–Ω—Ç–æ–≤
queue = deque()


# –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
async def enqueue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user not in queue:
        queue.append(user)
        await update.message.reply_text(f'–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å.')
    else:
        await update.message.reply_text('–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.')

# –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
async def dequeue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user in queue:
        queue.remove(user)
        await update.message.reply_text('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.')
    else:
        await update.message.reply_text('–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.')

# –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_user = update.message.from_user
    if queue:
        current_queue = [f'{i+1}. {user.first_name} - @{user.username}' for i, user in enumerate(queue)]
        await update.message.reply_text('\n'.join(current_queue))
        if current_user in queue:
            if current_user.id == queue[0].id:
                await update.message.reply_text("–í–´ –ü–ï–†–í–´–ô –í –û–ß–ï–†–ï–î–ò")
            else:
                await update.message.reply_text("–£–í–´")
    else:
        await update.message.reply_text('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.')

async def swap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if context.args:
        args = context.args
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /swap <–Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏>')
    if len(args) != 1:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /swap <–Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏>')


    try:
        swap_position = int(args[0]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞
        user_position = queue.index(update.message.from_user)
    except ValueError:
        await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏.')

    except IndexError:
        await update.message.reply_text('–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.')


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–º–µ–Ω–∞
    if swap_position < 0 or swap_position >= len(queue):
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏.')

    # –û–±–º–µ–Ω –º–µ—Å—Ç–∞–º–∏
    if swap_position > user_position:
        queue[user_position], queue[swap_position] = queue[swap_position], queue[user_position]
        update.message.reply_text(f'–í—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π {swap_position + 1}.')
    elif swap_position == user_position:
        await update.message.reply_text('–ó –û –ß –ï –ú ?')

async def swap_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    if user in queue:
        current_queue = []
        for i, user in enumerate(queue):
            current_queue.append(['@' + user.username])
        #current_queue = [f['@{user.username}'] for i, user in enumerate(queue)]
        #await update.message.reply_text(type(current_queue[0]).__name__)
    else:
        await update.message.reply_text('–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.')

    #await update.message.reply_text(current_queue)
    
    reply_keyboard = current_queue #[['üëâ–í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—åüëâ', 'üëà–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—åüëà'], ['üíÄ–£–≤–∏–¥–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ —É–º–µ—Ä–µ—Ç—åüíÄ']]
    
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(f'–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å—Å—è?', reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.from_user.first_name

    reply_keyboard = [[commands[0], commands[1]], [commands[2]], [commands[3]], [commands[4]]] #[['üëâ–í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—åüëâ', 'üëà–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—åüëà'], ['üíÄ–£–≤–∏–¥–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ —É–º–µ—Ä–µ—Ç—åüíÄ']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)

    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {username}! –ß–µ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏?', reply_markup=markup)


TEXT_HANDLERS = {
    'üëâ–í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—åüëâ': enqueue,
    'üëà–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—åüëà': dequeue,
    'üíÄ–£–≤–∏–¥–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ —É–º–µ—Ä–µ—Ç—åüíÄ': status,
    'üëâüëà–ü–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏üëâüëà' : swap_request,
    'üîÑ–û–±–Ω–æ–≤–∏—Ç—åüîÑ' : start
}

commands = list(TEXT_HANDLERS.keys())



async def user_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.from_user.first_name
    await update.message.reply_text(f'–î–∞—Ä–æ–≤–∞, {username}! –ß–µ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏?')

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    handler = TEXT_HANDLERS.get(text)
    

    if handler:
        await handler(update, context)
    elif text.startswith('@'):
        current_user = update.message.from_user
        
        if queue:
            current_user_index = queue.index(current_user)
            #await update.message.reply_text(f'current_user_index = {queue.index(current_user)}')
            for i, user in enumerate(queue):
                if text == '@' + user.username:
                    #await update.message.reply_text(f'i = {i}')
                    #await update.message.reply_text(f'i[] 1 = {queue[i].username}')
                    if i < current_user_index and current_user.username != 'riardd':
                        await update.message.reply_text("–¢—ã –æ—Ö—É–µ–ª?")
                        break
                    queue[i], queue[current_user_index] = current_user, user
            
        else:
                await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω")
        
        current_queue = [f'{i+1}. {user.first_name} - @{user.username}' for i, user in enumerate(queue)]
        await update.message.reply_text('\n'.join(current_queue))
        start(update, context)
    else:
        if (text == "–ö—Ç–æ –Ω–∞—Ö—É–π?"):
            await update.message.reply_text('–Ø –Ω–∞—Ö—É–π!')
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=update.message.text)
    

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–®–æ —è –Ω–µ –ø–æ–Ω—è–ª?")




if __name__ == '__main__':
    application = ApplicationBuilder().token('6878650923:AAGz0mV5QlnzC2WtClIldVx66fo4qwm6VXI').build()

    #nick = 

    start_handler = CommandHandler('start', start)

    enqueue_handler = CommandHandler('enqueue', enqueue)
    dequeue_handler = CommandHandler('dequeue', dequeue)
    swap_handler = CommandHandler('swap', swap)
    
    status_handler = CommandHandler('status', status)

    user_handler = MessageHandler(filters.USER & (~filters.COMMAND), user_check)
    echo_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), echo)
    unknown_handler = MessageHandler(filters.COMMAND, unknown)

    application.add_handler(start_handler)
    application.add_handler(enqueue_handler)
    application.add_handler(dequeue_handler)
    application.add_handler(swap_handler)
    application.add_handler(status_handler)
    application.add_handler(echo_handler)
    application.add_handler(unknown_handler)

    application.run_polling()